name: CI/CD Spring Boot Secure Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.MAVEN_DEPLOY_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      # -----------------------------
      # Checkout Code
      # -----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -----------------------------
      # Set up Java and cache Maven
      # -----------------------------
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # -----------------------------
      # Secret Scanning (TruffleHog)
      # -----------------------------
      - name: Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@v3.90.0
        with:
          path: .

      # -----------------------------
      # Static Code Analysis (SonarQube / SonarCloud)
      # -----------------------------
      - name: Run SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=learnwithprayag_springboot-demo
            -Dsonar.organization=learnwithprayag
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # -----------------------------
      # Snyk Dependency Scan
      # -----------------------------
      - name: Install Snyk
        run: npm install -g snyk

      - name: Upload scan results to Snyk (for UI visibility)
        run: snyk monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # -----------------------------
      # OWASP Dependency-Check CLI
      # -----------------------------
      - name: Install OWASP Dependency-Check CLI
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip -d $HOME/dependency-check
          chmod +x $HOME/dependency-check/bin/dependency-check.sh
          echo "$HOME/dependency-check/bin" >> $GITHUB_PATH
      
      - name: Run OWASP Dependency-Check Scan
        run: |
          mkdir -p dependency-check-report
          dependency-check.sh \
            --project "springboot-demo" \
            --scan . \
            --format "HTML" \
            --out "dependency-check-report"
      
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report



      # -----------------------------
      # Configure Maven settings
      # -----------------------------
      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0">
            <servers>
              <server>
                <id>github</id>
                <username>learnwithprayag</username>
                <password>\${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      # -----------------------------
      # Generate timestamp version
      # -----------------------------
      - name: Generate timestamp version
        id: timestamp
        run: |
          TIMESTAMP_VERSION=$(date +%Y%m%d%H%M%S)
          MAVEN_VERSION="2.0.0-$TIMESTAMP_VERSION"
          echo "maven_version=$MAVEN_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$TIMESTAMP_VERSION" >> $GITHUB_OUTPUT

      # -----------------------------
      # Set Maven version dynamically
      # -----------------------------
      - name: Set Maven version dynamically
        run: mvn versions:set -DnewVersion=${{ steps.timestamp.outputs.maven_version }} -DgenerateBackupPoms=false

      # -----------------------------
      # Build and Package
      # -----------------------------
      - name: Build JAR
        run: mvn clean package -DskipTests=false

      # Rename JAR for Docker
      - name: Rename JAR for Docker
        run: mv target/*-SNAPSHOT.jar target/app.jar || mv target/*.jar target/app.jar

      # -----------------------------
      # Deploy to GitHub Packages
      # -----------------------------
      #- name: Deploy Artifact
      #  run: mvn deploy -s ~/.m2/settings.xml

      # -----------------------------
      # Container Build & Push
      # -----------------------------
      - name: Log in to GitHub Container Registry
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u learnwithprayag --password-stdin

      - name: Build Docker image
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          docker build -t ghcr.io/learnwithprayag/springboot-demo:$SHORT_SHA \
                       -t ghcr.io/learnwithprayag/springboot-demo:latest \
                       -t ghcr.io/learnwithprayag/springboot-demo:${{ steps.timestamp.outputs.docker_tag }} .

      # -----------------------------
      # Container Scan (Trivy)
      # -----------------------------
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ghcr.io/learnwithprayag/springboot-demo:${{ env.SHORT_SHA }}
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      # -----------------------------
      # Push Docker Images
      # -----------------------------
      #- name: Push Docker images
      #  run: |
      #    docker push ghcr.io/learnwithprayag/springboot-demo:${{ env.SHORT_SHA }}
      #    docker push ghcr.io/learnwithprayag/springboot-demo:latest
      #    docker push ghcr.io/learnwithprayag/springboot-demo:${{ steps.timestamp.outputs.docker_tag }}
