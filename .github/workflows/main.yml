name: CI/CD Spring Boot

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.MAVEN_DEPLOY_TOKEN }}
      GITHUB_PACKAGE_VERSION: 2.0.0  # Set artifact version here

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Set up Java and cache Maven
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # 3Ô∏è‚É£ Configure Maven settings
      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                        https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>learnwithprayag</username>
                <password>\${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      # 4Ô∏è‚É£ Check if Maven artifact version exists
      - name: Check if Maven artifact version exists
        id: check_package
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/users/learnwithprayag/packages/maven/springboot-demo/versions)

          PACKAGE_EXISTS=""
          if echo "$RESPONSE" | jq type | grep -q '"array"'; then
            PACKAGE_EXISTS=$(echo "$RESPONSE" | jq -r --arg VERSION "$GITHUB_PACKAGE_VERSION" '
              .[] | select(.name==$VERSION) | .name
            ')
          fi
          echo "DEBUG: PACKAGE_EXISTS=$PACKAGE_EXISTS"
          echo "package_exists=$PACKAGE_EXISTS" >> $GITHUB_OUTPUT

      # 5Ô∏è‚É£ Set Maven version dynamically if not exists
      - name: Set Maven version dynamically
        if: steps.check_package.outputs.package_exists == ''
        run: mvn versions:set -DnewVersion=${GITHUB_PACKAGE_VERSION} -DgenerateBackupPoms=false

      # 6Ô∏è‚É£ Build JAR
      - name: Build JAR
        run: mvn clean package

      # 7Ô∏è‚É£ Detect built JAR filename dynamically
      - name: Detect JAR filename
        id: jar_file
        run: |
          JAR_NAME=$(ls target/springboot-demo-*.jar | xargs -n 1 basename)
          echo "jar_file=$JAR_NAME" >> $GITHUB_OUTPUT

      # 8Ô∏è‚É£ Deploy to GitHub Packages if new version
      - name: Deploy to GitHub Packages
        if: steps.check_package.outputs.package_exists == ''
        run: mvn deploy -s ~/.m2/settings.xml

      # 9Ô∏è‚É£ Log in to GHCR
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u learnwithprayag --password-stdin

      # üîü Build Docker image with dynamic JAR filename
      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=${{ steps.jar_file.outputs.jar_file }} \
            -t ghcr.io/learnwithprayag/springboot-demo:${GITHUB_SHA::7} \
            -t ghcr.io/learnwithprayag/springboot-demo:latest .

      # 1Ô∏è‚É£1Ô∏è‚É£ Push Docker image
      - name: Push Docker image
        run: |
          docker push ghcr.io/learnwithprayag/springboot-demo:${GITHUB_SHA::7}
          docker push ghcr.io/learnwithprayag/springboot-demo:latest
